rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions for role-based access control
    function getUserRole() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
    }

    function hasRole(role) {
      return request.auth != null && getUserRole() == role;
    }

    function hasAnyRole(roles) {
      return request.auth != null && getUserRole() in roles;
    }

    function isHostAssignedToCard(cardId) {
      return exists(/databases/$(database)/documents/cards/$(cardId)) &&
        get(/databases/$(database)/documents/cards/$(cardId)).data.assignedHost == request.auth.uid;
    }

    // USERS COLLECTION
    match /users/{userId} {
      // Read: Users can read their own profile, admins can read all
      allow read: if request.auth != null && (
        request.auth.uid == userId || hasRole('admin')
      );
      
      // Create: Only during signup, default role is 'user'
      allow create: if request.auth != null &&
        request.auth.uid == userId &&
        request.resource.data.role == 'user' &&
        request.resource.data.uid == request.auth.uid &&
        request.resource.data.email == request.auth.token.email;
      
      // Update: Users can update their own profile (except role), admins can update everything
      allow update: if request.auth != null && (
        (request.auth.uid == userId &&
         !('role' in request.resource.data.diff(resource.data).affectedKeys())) ||
        hasRole('admin')
      );
      
      // Delete: Only admins can delete users
      allow delete: if hasRole('admin');
    }

    // CARDS COLLECTION
    match /cards/{cardId} {
      // Read: Everyone can read cards (for browsing)
      allow read: if true;
      
      // Create: Only admins can create cards
      allow create: if hasRole('admin') &&
        request.resource.data.Card_ID is string &&
        request.resource.data.title is string &&
        request.resource.data.type is string &&
        request.resource.data.pricePerHour is number &&
        request.resource.data.pricePerHour > 0;
      
      // Update: Admins can update all cards, hosts can update only assigned cards
      allow update: if request.auth != null && (
        hasRole('admin') ||
        (hasRole('host') && resource.data.assignedHost == request.auth.uid)
      );
      
      // Delete: Only admins can delete cards
      allow delete: if hasRole('admin');
    }

    // BOOKINGS COLLECTION
    match /bookings/{bookingId} {
      // Read: All authenticated users can read bookings (for games and availability)
      allow read: if request.auth != null;
      
      // Create: Users and hosts can create bookings (admins cannot)
      allow create: if request.auth != null &&
        request.resource.data.userId == request.auth.uid &&
        request.resource.data.cardId is string &&
        request.resource.data.Card_ID is string &&
        request.resource.data.date is string &&
        request.resource.data.timeSlot is string &&
        !hasRole('admin') &&
        (hasRole('user') || hasRole('host'));
      
      // Update: Booking owner and admins can update
      allow update: if request.auth != null && (
        resource.data.userId == request.auth.uid ||
        hasRole('admin')
      );
      
      // Delete: Booking owner and admins can delete
      allow delete: if request.auth != null && (
        resource.data.userId == request.auth.uid ||
        hasRole('admin')
      );
    }

    // REQUESTS COLLECTION
    match /Requests/{requestId} {
      // Read: Users can read their own requests, admins can read all
      allow read: if request.auth != null && (
        resource.data.userId == request.auth.uid || 
        hasRole('admin')
      );
      
      // Create: Users and hosts can create requests
      allow create: if request.auth != null &&
        request.resource.data.userId == request.auth.uid &&
        request.resource.data.userEmail == request.auth.token.email &&
        request.resource.data.status == 'pending' &&
        request.resource.data.requestType in ['host-request', 'new-card', 'mfa-reset'] &&
        (hasRole('user') || hasRole('host'));
      
      // Update: Only admins can update requests (for approval/rejection)
      allow update: if hasRole('admin');
      
      // Delete: Only admins can delete requests
      allow delete: if hasRole('admin');
    }

    // NOTIFICATIONS COLLECTION
    match /notifications/{notificationId} {
      // Read: Users can read their own notifications, admins can read all
      allow read: if request.auth != null && (
        resource.data.userId == request.auth.uid || 
        hasRole('admin')
      );
      
      // Create: Any authenticated user can create notifications
      allow create: if request.auth != null &&
        request.resource.data.userId is string &&
        request.resource.data.type is string &&
        request.resource.data.title is string &&
        request.resource.data.message is string;
      
      // Update: Notification owner and admins can update (for marking as read)
      allow update: if request.auth != null && (
        resource.data.userId == request.auth.uid || 
        hasRole('admin')
      );
      
      // Delete: Notification owner and admins can delete
      allow delete: if request.auth != null && (
        resource.data.userId == request.auth.uid || 
        hasRole('admin')
      );
    }

    // SETTINGS COLLECTION (for homepage management)
    match /settings/{settingId} {
      // Read: Everyone can read settings (for homepage display)
      allow read: if true;
      
      // Create/Update/Delete: Only admins can manage settings
      allow create, update, delete: if hasRole('admin');
    }

    // SLOTS COLLECTION (if used separately from cards)
    match /slots/{slotId} {
      // Read: Everyone can read slots
      allow read: if true;
      
      // Create/Update/Delete: Only admins can manage slots
      allow create, update, delete: if hasRole('admin');
    }

    // Deny all other access by default
    match /{document=**} {
      allow read, write: if false;
    }
  }
}